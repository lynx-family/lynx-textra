/**************************************************************
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *************************************************************/

#include "bidi_mirror.h"
BidiMirror::DtMap BidiMirror::Create_mData() {
  BidiMirror::DtMap dtMap;
  dtMap[0x0028] = 0x0029;  // LEFT PARENTHESIS
  dtMap[0x0029] = 0x0028;  // RIGHT PARENTHESIS
  dtMap[0x003C] = 0x003E;  // LESS-THAN SIGN
  dtMap[0x003E] = 0x003C;  // GREATER-THAN SIGN
  dtMap[0x005B] = 0x005D;  // LEFT SQUARE BRACKET
  dtMap[0x005D] = 0x005B;  // RIGHT SQUARE BRACKET
  dtMap[0x007B] = 0x007D;  // LEFT CURLY BRACKET
  dtMap[0x007D] = 0x007B;  // RIGHT CURLY BRACKET
  dtMap[0x00AB] = 0x00BB;  // LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
  dtMap[0x00BB] = 0x00AB;  // RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
  dtMap[0x0F3A] = 0x0F3B;  // TIBETAN MARK GUG RTAGS GYON
  dtMap[0x0F3B] = 0x0F3A;  // TIBETAN MARK GUG RTAGS GYAS
  dtMap[0x0F3C] = 0x0F3D;  // TIBETAN MARK ANG KHANG GYON
  dtMap[0x0F3D] = 0x0F3C;  // TIBETAN MARK ANG KHANG GYAS
  dtMap[0x169B] = 0x169C;  // OGHAM FEATHER MARK
  dtMap[0x169C] = 0x169B;  // OGHAM REVERSED FEATHER MARK
  dtMap[0x2039] = 0x203A;  // SINGLE LEFT-POINTING ANGLE QUOTATION MARK
  dtMap[0x203A] = 0x2039;  // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
  dtMap[0x2045] = 0x2046;  // LEFT SQUARE BRACKET WITH QUILL
  dtMap[0x2046] = 0x2045;  // RIGHT SQUARE BRACKET WITH QUILL
  dtMap[0x207D] = 0x207E;  // SUPERSCRIPT LEFT PARENTHESIS
  dtMap[0x207E] = 0x207D;  // SUPERSCRIPT RIGHT PARENTHESIS
  dtMap[0x208D] = 0x208E;  // SUBSCRIPT LEFT PARENTHESIS
  dtMap[0x208E] = 0x208D;  // SUBSCRIPT RIGHT PARENTHESIS
  dtMap[0x2208] = 0x220B;  // ELEMENT OF
  dtMap[0x2209] = 0x220C;  // NOT AN ELEMENT OF
  dtMap[0x220A] = 0x220D;  // SMALL ELEMENT OF
  dtMap[0x220B] = 0x2208;  // CONTAINS AS MEMBER
  dtMap[0x220C] = 0x2209;  // DOES NOT CONTAIN AS MEMBER
  dtMap[0x220D] = 0x220A;  // SMALL CONTAINS AS MEMBER
  dtMap[0x2215] = 0x29F5;  // DIVISION SLASH
  dtMap[0x221F] = 0x2BFE;  // RIGHT ANGLE
  dtMap[0x2220] = 0x29A3;  // ANGLE
  dtMap[0x2221] = 0x299B;  // MEASURED ANGLE
  dtMap[0x2222] = 0x29A0;  // SPHERICAL ANGLE
  dtMap[0x2224] = 0x2AEE;  // DOES NOT DIVIDE
  dtMap[0x223C] = 0x223D;  // TILDE OPERATOR
  dtMap[0x223D] = 0x223C;  // REVERSED TILDE
  dtMap[0x2243] = 0x22CD;  // ASYMPTOTICALLY EQUAL TO
  dtMap[0x2245] = 0x224C;  // APPROXIMATELY EQUAL TO
  dtMap[0x224C] = 0x2245;  // ALL EQUAL TO
  dtMap[0x2252] = 0x2253;  // APPROXIMATELY EQUAL TO OR THE IMAGE OF
  dtMap[0x2253] = 0x2252;  // IMAGE OF OR APPROXIMATELY EQUAL TO
  dtMap[0x2254] = 0x2255;  // COLON EQUALS
  dtMap[0x2255] = 0x2254;  // EQUALS COLON
  dtMap[0x2264] = 0x2265;  // LESS-THAN OR EQUAL TO
  dtMap[0x2265] = 0x2264;  // GREATER-THAN OR EQUAL TO
  dtMap[0x2266] = 0x2267;  // LESS-THAN OVER EQUAL TO
  dtMap[0x2267] = 0x2266;  // GREATER-THAN OVER EQUAL TO
  dtMap[0x2268] = 0x2269;  // [BEST FIT] LESS-THAN BUT NOT EQUAL TO
  dtMap[0x2269] = 0x2268;  // [BEST FIT] GREATER-THAN BUT NOT EQUAL TO
  dtMap[0x226A] = 0x226B;  // MUCH LESS-THAN
  dtMap[0x226B] = 0x226A;  // MUCH GREATER-THAN
  dtMap[0x226E] = 0x226F;  // [BEST FIT] NOT LESS-THAN
  dtMap[0x226F] = 0x226E;  // [BEST FIT] NOT GREATER-THAN
  dtMap[0x2270] = 0x2271;  // [BEST FIT] NEITHER LESS-THAN NOR EQUAL TO
  dtMap[0x2271] = 0x2270;  // [BEST FIT] NEITHER GREATER-THAN NOR EQUAL TO
  dtMap[0x2272] = 0x2273;  // [BEST FIT] LESS-THAN OR EQUIVALENT TO
  dtMap[0x2273] = 0x2272;  // [BEST FIT] GREATER-THAN OR EQUIVALENT TO
  dtMap[0x2274] = 0x2275;  // [BEST FIT] NEITHER LESS-THAN NOR EQUIVALENT TO
  dtMap[0x2275] = 0x2274;  // [BEST FIT] NEITHER GREATER-THAN NOR EQUIVALENT TO
  dtMap[0x2276] = 0x2277;  // LESS-THAN OR GREATER-THAN
  dtMap[0x2277] = 0x2276;  // GREATER-THAN OR LESS-THAN
  dtMap[0x2278] = 0x2279;  // [BEST FIT] NEITHER LESS-THAN NOR GREATER-THAN
  dtMap[0x2279] = 0x2278;  // [BEST FIT] NEITHER GREATER-THAN NOR LESS-THAN
  dtMap[0x227A] = 0x227B;  // PRECEDES
  dtMap[0x227B] = 0x227A;  // SUCCEEDS
  dtMap[0x227C] = 0x227D;  // PRECEDES OR EQUAL TO
  dtMap[0x227D] = 0x227C;  // SUCCEEDS OR EQUAL TO
  dtMap[0x227E] = 0x227F;  // [BEST FIT] PRECEDES OR EQUIVALENT TO
  dtMap[0x227F] = 0x227E;  // [BEST FIT] SUCCEEDS OR EQUIVALENT TO
  dtMap[0x2280] = 0x2281;  // [BEST FIT] DOES NOT PRECEDE
  dtMap[0x2281] = 0x2280;  // [BEST FIT] DOES NOT SUCCEED
  dtMap[0x2282] = 0x2283;  // SUBSET OF
  dtMap[0x2283] = 0x2282;  // SUPERSET OF
  dtMap[0x2284] = 0x2285;  // [BEST FIT] NOT A SUBSET OF
  dtMap[0x2285] = 0x2284;  // [BEST FIT] NOT A SUPERSET OF
  dtMap[0x2286] = 0x2287;  // SUBSET OF OR EQUAL TO
  dtMap[0x2287] = 0x2286;  // SUPERSET OF OR EQUAL TO
  dtMap[0x2288] = 0x2289;  // [BEST FIT] NEITHER A SUBSET OF NOR EQUAL TO
  dtMap[0x2289] = 0x2288;  // [BEST FIT] NEITHER A SUPERSET OF NOR EQUAL TO
  dtMap[0x228A] = 0x228B;  // [BEST FIT] SUBSET OF WITH NOT EQUAL TO
  dtMap[0x228B] = 0x228A;  // [BEST FIT] SUPERSET OF WITH NOT EQUAL TO
  dtMap[0x228F] = 0x2290;  // SQUARE IMAGE OF
  dtMap[0x2290] = 0x228F;  // SQUARE ORIGINAL OF
  dtMap[0x2291] = 0x2292;  // SQUARE IMAGE OF OR EQUAL TO
  dtMap[0x2292] = 0x2291;  // SQUARE ORIGINAL OF OR EQUAL TO
  dtMap[0x2298] = 0x29B8;  // CIRCLED DIVISION SLASH
  dtMap[0x22A2] = 0x22A3;  // RIGHT TACK
  dtMap[0x22A3] = 0x22A2;  // LEFT TACK
  dtMap[0x22A6] = 0x2ADE;  // ASSERTION
  dtMap[0x22A8] = 0x2AE4;  // TRUE
  dtMap[0x22A9] = 0x2AE3;  // FORCES
  dtMap[0x22AB] = 0x2AE5;  // DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE
  dtMap[0x22B0] = 0x22B1;  // PRECEDES UNDER RELATION
  dtMap[0x22B1] = 0x22B0;  // SUCCEEDS UNDER RELATION
  dtMap[0x22B2] = 0x22B3;  // NORMAL SUBGROUP OF
  dtMap[0x22B3] = 0x22B2;  // CONTAINS AS NORMAL SUBGROUP
  dtMap[0x22B4] = 0x22B5;  // NORMAL SUBGROUP OF OR EQUAL TO
  dtMap[0x22B5] = 0x22B4;  // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO
  dtMap[0x22B6] = 0x22B7;  // ORIGINAL OF
  dtMap[0x22B7] = 0x22B6;  // IMAGE OF
  dtMap[0x22B8] = 0x27DC;  // MULTIMAP
  dtMap[0x22C9] = 0x22CA;  // LEFT NORMAL FACTOR SEMIDIRECT PRODUCT
  dtMap[0x22CA] = 0x22C9;  // RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT
  dtMap[0x22CB] = 0x22CC;  // LEFT SEMIDIRECT PRODUCT
  dtMap[0x22CC] = 0x22CB;  // RIGHT SEMIDIRECT PRODUCT
  dtMap[0x22CD] = 0x2243;  // REVERSED TILDE EQUALS
  dtMap[0x22D0] = 0x22D1;  // DOUBLE SUBSET
  dtMap[0x22D1] = 0x22D0;  // DOUBLE SUPERSET
  dtMap[0x22D6] = 0x22D7;  // LESS-THAN WITH DOT
  dtMap[0x22D7] = 0x22D6;  // GREATER-THAN WITH DOT
  dtMap[0x22D8] = 0x22D9;  // VERY MUCH LESS-THAN
  dtMap[0x22D9] = 0x22D8;  // VERY MUCH GREATER-THAN
  dtMap[0x22DA] = 0x22DB;  // LESS-THAN EQUAL TO OR GREATER-THAN
  dtMap[0x22DB] = 0x22DA;  // GREATER-THAN EQUAL TO OR LESS-THAN
  dtMap[0x22DC] = 0x22DD;  // EQUAL TO OR LESS-THAN
  dtMap[0x22DD] = 0x22DC;  // EQUAL TO OR GREATER-THAN
  dtMap[0x22DE] = 0x22DF;  // EQUAL TO OR PRECEDES
  dtMap[0x22DF] = 0x22DE;  // EQUAL TO OR SUCCEEDS
  dtMap[0x22E0] = 0x22E1;  // [BEST FIT] DOES NOT PRECEDE OR EQUAL
  dtMap[0x22E1] = 0x22E0;  // [BEST FIT] DOES NOT SUCCEED OR EQUAL
  dtMap[0x22E2] = 0x22E3;  // [BEST FIT] NOT SQUARE IMAGE OF OR EQUAL TO
  dtMap[0x22E3] = 0x22E2;  // [BEST FIT] NOT SQUARE ORIGINAL OF OR EQUAL TO
  dtMap[0x22E4] = 0x22E5;  // [BEST FIT] SQUARE IMAGE OF OR NOT EQUAL TO
  dtMap[0x22E5] = 0x22E4;  // [BEST FIT] SQUARE ORIGINAL OF OR NOT EQUAL TO
  dtMap[0x22E6] = 0x22E7;  // [BEST FIT] LESS-THAN BUT NOT EQUIVALENT TO
  dtMap[0x22E7] = 0x22E6;  // [BEST FIT] GREATER-THAN BUT NOT EQUIVALENT TO
  dtMap[0x22E8] = 0x22E9;  // [BEST FIT] PRECEDES BUT NOT EQUIVALENT TO
  dtMap[0x22E9] = 0x22E8;  // [BEST FIT] SUCCEEDS BUT NOT EQUIVALENT TO
  dtMap[0x22EA] = 0x22EB;  // [BEST FIT] NOT NORMAL SUBGROUP OF
  dtMap[0x22EB] = 0x22EA;  // [BEST FIT] DOES NOT CONTAIN AS NORMAL SUBGROUP
  dtMap[0x22EC] = 0x22ED;  // [BEST FIT] NOT NORMAL SUBGROUP OF OR EQUAL TO
  dtMap[0x22ED] =
      0x22EC;  // [BEST FIT] DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL
  dtMap[0x22F0] = 0x22F1;  // UP RIGHT DIAGONAL ELLIPSIS
  dtMap[0x22F1] = 0x22F0;  // DOWN RIGHT DIAGONAL ELLIPSIS
  dtMap[0x22F2] = 0x22FA;  // ELEMENT OF WITH LONG HORIZONTAL STROKE
  dtMap[0x22F3] =
      0x22FB;  // ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE
  dtMap[0x22F4] =
      0x22FC;  // SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE
  dtMap[0x22F6] = 0x22FD;  // ELEMENT OF WITH OVERBAR
  dtMap[0x22F7] = 0x22FE;  // SMALL ELEMENT OF WITH OVERBAR
  dtMap[0x22FA] = 0x22F2;  // CONTAINS WITH LONG HORIZONTAL STROKE
  dtMap[0x22FB] =
      0x22F3;  // CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE
  dtMap[0x22FC] =
      0x22F4;  // SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE
  dtMap[0x22FD] = 0x22F6;  // CONTAINS WITH OVERBAR
  dtMap[0x22FE] = 0x22F7;  // SMALL CONTAINS WITH OVERBAR
  dtMap[0x2308] = 0x2309;  // LEFT CEILING
  dtMap[0x2309] = 0x2308;  // RIGHT CEILING
  dtMap[0x230A] = 0x230B;  // LEFT FLOOR
  dtMap[0x230B] = 0x230A;  // RIGHT FLOOR
  dtMap[0x2329] = 0x232A;  // LEFT-POINTING ANGLE BRACKET
  dtMap[0x232A] = 0x2329;  // RIGHT-POINTING ANGLE BRACKET
  dtMap[0x2768] = 0x2769;  // MEDIUM LEFT PARENTHESIS ORNAMENT
  dtMap[0x2769] = 0x2768;  // MEDIUM RIGHT PARENTHESIS ORNAMENT
  dtMap[0x276A] = 0x276B;  // MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT
  dtMap[0x276B] = 0x276A;  // MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT
  dtMap[0x276C] = 0x276D;  // MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT
  dtMap[0x276D] = 0x276C;  // MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT
  dtMap[0x276E] = 0x276F;  // HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT
  dtMap[0x276F] = 0x276E;  // HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT
  dtMap[0x2770] = 0x2771;  // HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT
  dtMap[0x2771] = 0x2770;  // HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT
  dtMap[0x2772] = 0x2773;  // LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT
  dtMap[0x2773] = 0x2772;  // LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT
  dtMap[0x2774] = 0x2775;  // MEDIUM LEFT CURLY BRACKET ORNAMENT
  dtMap[0x2775] = 0x2774;  // MEDIUM RIGHT CURLY BRACKET ORNAMENT
  dtMap[0x27C3] = 0x27C4;  // OPEN SUBSET
  dtMap[0x27C4] = 0x27C3;  // OPEN SUPERSET
  dtMap[0x27C5] = 0x27C6;  // LEFT S-SHAPED BAG DELIMITER
  dtMap[0x27C6] = 0x27C5;  // RIGHT S-SHAPED BAG DELIMITER
  dtMap[0x27C8] = 0x27C9;  // REVERSE SOLIDUS PRECEDING SUBSET
  dtMap[0x27C9] = 0x27C8;  // SUPERSET PRECEDING SOLIDUS
  dtMap[0x27CB] = 0x27CD;  // MATHEMATICAL RISING DIAGONAL
  dtMap[0x27CD] = 0x27CB;  // MATHEMATICAL FALLING DIAGONAL
  dtMap[0x27D5] = 0x27D6;  // LEFT OUTER JOIN
  dtMap[0x27D6] = 0x27D5;  // RIGHT OUTER JOIN
  dtMap[0x27DC] = 0x22B8;  // LEFT MULTIMAP
  dtMap[0x27DD] = 0x27DE;  // LONG RIGHT TACK
  dtMap[0x27DE] = 0x27DD;  // LONG LEFT TACK
  dtMap[0x27E2] = 0x27E3;  // WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK
  dtMap[0x27E3] = 0x27E2;  // WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK
  dtMap[0x27E4] = 0x27E5;  // WHITE SQUARE WITH LEFTWARDS TICK
  dtMap[0x27E5] = 0x27E4;  // WHITE SQUARE WITH RIGHTWARDS TICK
  dtMap[0x27E6] = 0x27E7;  // MATHEMATICAL LEFT WHITE SQUARE BRACKET
  dtMap[0x27E7] = 0x27E6;  // MATHEMATICAL RIGHT WHITE SQUARE BRACKET
  dtMap[0x27E8] = 0x27E9;  // MATHEMATICAL LEFT ANGLE BRACKET
  dtMap[0x27E9] = 0x27E8;  // MATHEMATICAL RIGHT ANGLE BRACKET
  dtMap[0x27EA] = 0x27EB;  // MATHEMATICAL LEFT DOUBLE ANGLE BRACKET
  dtMap[0x27EB] = 0x27EA;  // MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET
  dtMap[0x27EC] = 0x27ED;  // MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET
  dtMap[0x27ED] = 0x27EC;  // MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET
  dtMap[0x27EE] = 0x27EF;  // MATHEMATICAL LEFT FLATTENED PARENTHESIS
  dtMap[0x27EF] = 0x27EE;  // MATHEMATICAL RIGHT FLATTENED PARENTHESIS
  dtMap[0x2983] = 0x2984;  // LEFT WHITE CURLY BRACKET
  dtMap[0x2984] = 0x2983;  // RIGHT WHITE CURLY BRACKET
  dtMap[0x2985] = 0x2986;  // LEFT WHITE PARENTHESIS
  dtMap[0x2986] = 0x2985;  // RIGHT WHITE PARENTHESIS
  dtMap[0x2987] = 0x2988;  // Z NOTATION LEFT IMAGE BRACKET
  dtMap[0x2988] = 0x2987;  // Z NOTATION RIGHT IMAGE BRACKET
  dtMap[0x2989] = 0x298A;  // Z NOTATION LEFT BINDING BRACKET
  dtMap[0x298A] = 0x2989;  // Z NOTATION RIGHT BINDING BRACKET
  dtMap[0x298B] = 0x298C;  // LEFT SQUARE BRACKET WITH UNDERBAR
  dtMap[0x298C] = 0x298B;  // RIGHT SQUARE BRACKET WITH UNDERBAR
  dtMap[0x298D] = 0x2990;  // LEFT SQUARE BRACKET WITH TICK IN TOP CORNER
  dtMap[0x298E] = 0x298F;  // RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER
  dtMap[0x298F] = 0x298E;  // LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER
  dtMap[0x2990] = 0x298D;  // RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER
  dtMap[0x2991] = 0x2992;  // LEFT ANGLE BRACKET WITH DOT
  dtMap[0x2992] = 0x2991;  // RIGHT ANGLE BRACKET WITH DOT
  dtMap[0x2993] = 0x2994;  // LEFT ARC LESS-THAN BRACKET
  dtMap[0x2994] = 0x2993;  // RIGHT ARC GREATER-THAN BRACKET
  dtMap[0x2995] = 0x2996;  // DOUBLE LEFT ARC GREATER-THAN BRACKET
  dtMap[0x2996] = 0x2995;  // DOUBLE RIGHT ARC LESS-THAN BRACKET
  dtMap[0x2997] = 0x2998;  // LEFT BLACK TORTOISE SHELL BRACKET
  dtMap[0x2998] = 0x2997;  // RIGHT BLACK TORTOISE SHELL BRACKET
  dtMap[0x299B] = 0x2221;  // MEASURED ANGLE OPENING LEFT
  dtMap[0x29A0] = 0x2222;  // SPHERICAL ANGLE OPENING LEFT
  dtMap[0x29A3] = 0x2220;  // REVERSED ANGLE
  dtMap[0x29A4] = 0x29A5;  // ANGLE WITH UNDERBAR
  dtMap[0x29A5] = 0x29A4;  // REVERSED ANGLE WITH UNDERBAR
  dtMap[0x29A8] = 0x29A9;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING UP AND RIGHT
  dtMap[0x29A9] = 0x29A8;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING UP AND LEFT
  dtMap[0x29AA] = 0x29AB;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING DOWN AND RIGHT
  dtMap[0x29AB] = 0x29AA;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING DOWN AND LEFT
  dtMap[0x29AC] = 0x29AD;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING RIGHT AND UP
  dtMap[0x29AD] = 0x29AC;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING LEFT AND UP
  dtMap[0x29AE] = 0x29AF;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING RIGHT AND DOWN
  dtMap[0x29AF] = 0x29AE;  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW
                           // POINTING LEFT AND DOWN
  dtMap[0x29B8] = 0x2298;  // CIRCLED REVERSE SOLIDUS
  dtMap[0x29C0] = 0x29C1;  // CIRCLED LESS-THAN
  dtMap[0x29C1] = 0x29C0;  // CIRCLED GREATER-THAN
  dtMap[0x29C4] = 0x29C5;  // SQUARED RISING DIAGONAL SLASH
  dtMap[0x29C5] = 0x29C4;  // SQUARED FALLING DIAGONAL SLASH
  dtMap[0x29CF] = 0x29D0;  // LEFT TRIANGLE BESIDE VERTICAL BAR
  dtMap[0x29D0] = 0x29CF;  // VERTICAL BAR BESIDE RIGHT TRIANGLE
  dtMap[0x29D1] = 0x29D2;  // BOWTIE WITH LEFT HALF BLACK
  dtMap[0x29D2] = 0x29D1;  // BOWTIE WITH RIGHT HALF BLACK
  dtMap[0x29D4] = 0x29D5;  // TIMES WITH LEFT HALF BLACK
  dtMap[0x29D5] = 0x29D4;  // TIMES WITH RIGHT HALF BLACK
  dtMap[0x29D8] = 0x29D9;  // LEFT WIGGLY FENCE
  dtMap[0x29D9] = 0x29D8;  // RIGHT WIGGLY FENCE
  dtMap[0x29DA] = 0x29DB;  // LEFT DOUBLE WIGGLY FENCE
  dtMap[0x29DB] = 0x29DA;  // RIGHT DOUBLE WIGGLY FENCE
  dtMap[0x29E8] = 0x29E9;  // DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK
  dtMap[0x29E9] = 0x29E8;  // DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK
  dtMap[0x29F5] = 0x2215;  // REVERSE SOLIDUS OPERATOR
  dtMap[0x29F8] = 0x29F9;  // BIG SOLIDUS
  dtMap[0x29F9] = 0x29F8;  // BIG REVERSE SOLIDUS
  dtMap[0x29FC] = 0x29FD;  // LEFT-POINTING CURVED ANGLE BRACKET
  dtMap[0x29FD] = 0x29FC;  // RIGHT-POINTING CURVED ANGLE BRACKET
  dtMap[0x2A2B] = 0x2A2C;  // MINUS SIGN WITH FALLING DOTS
  dtMap[0x2A2C] = 0x2A2B;  // MINUS SIGN WITH RISING DOTS
  dtMap[0x2A2D] = 0x2A2E;  // PLUS SIGN IN LEFT HALF CIRCLE
  dtMap[0x2A2E] = 0x2A2D;  // PLUS SIGN IN RIGHT HALF CIRCLE
  dtMap[0x2A34] = 0x2A35;  // MULTIPLICATION SIGN IN LEFT HALF CIRCLE
  dtMap[0x2A35] = 0x2A34;  // MULTIPLICATION SIGN IN RIGHT HALF CIRCLE
  dtMap[0x2A3C] = 0x2A3D;  // INTERIOR PRODUCT
  dtMap[0x2A3D] = 0x2A3C;  // RIGHTHAND INTERIOR PRODUCT
  dtMap[0x2A64] = 0x2A65;  // Z NOTATION DOMAIN ANTIRESTRICTION
  dtMap[0x2A65] = 0x2A64;  // Z NOTATION RANGE ANTIRESTRICTION
  dtMap[0x2A79] = 0x2A7A;  // LESS-THAN WITH CIRCLE INSIDE
  dtMap[0x2A7A] = 0x2A79;  // GREATER-THAN WITH CIRCLE INSIDE
  dtMap[0x2A7B] = 0x2A7C;  // [BEST FIT] LESS-THAN WITH QUESTION MARK ABOVE
  dtMap[0x2A7C] = 0x2A7B;  // [BEST FIT] GREATER-THAN WITH QUESTION MARK ABOVE
  dtMap[0x2A7D] = 0x2A7E;  // LESS-THAN OR SLANTED EQUAL TO
  dtMap[0x2A7E] = 0x2A7D;  // GREATER-THAN OR SLANTED EQUAL TO
  dtMap[0x2A7F] = 0x2A80;  // LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE
  dtMap[0x2A80] = 0x2A7F;  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE
  dtMap[0x2A81] = 0x2A82;  // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE
  dtMap[0x2A82] = 0x2A81;  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE
  dtMap[0x2A83] = 0x2A84;  // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT
  dtMap[0x2A84] =
      0x2A83;  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT
  dtMap[0x2A85] = 0x2A86;  // [BEST FIT] LESS-THAN OR APPROXIMATE
  dtMap[0x2A86] = 0x2A85;  // [BEST FIT] GREATER-THAN OR APPROXIMATE
  dtMap[0x2A87] = 0x2A88;  // [BEST FIT] LESS-THAN AND SINGLE-LINE NOT EQUAL TO
  dtMap[0x2A88] =
      0x2A87;  // [BEST FIT] GREATER-THAN AND SINGLE-LINE NOT EQUAL TO
  dtMap[0x2A89] = 0x2A8A;  // [BEST FIT] LESS-THAN AND NOT APPROXIMATE
  dtMap[0x2A8A] = 0x2A89;  // [BEST FIT] GREATER-THAN AND NOT APPROXIMATE
  dtMap[0x2A8B] =
      0x2A8C;  // LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN
  dtMap[0x2A8C] =
      0x2A8B;  // GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN
  dtMap[0x2A8D] = 0x2A8E;  // [BEST FIT] LESS-THAN ABOVE SIMILAR OR EQUAL
  dtMap[0x2A8E] = 0x2A8D;  // [BEST FIT] GREATER-THAN ABOVE SIMILAR OR EQUAL
  dtMap[0x2A8F] =
      0x2A90;  // [BEST FIT] LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN
  dtMap[0x2A90] =
      0x2A8F;  // [BEST FIT] GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN
  dtMap[0x2A91] =
      0x2A92;  // LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL
  dtMap[0x2A92] =
      0x2A91;  // GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL
  dtMap[0x2A93] = 0x2A94;  // LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN
                           // ABOVE SLANTED EQUAL
  dtMap[0x2A94] = 0x2A93;  // GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN
                           // ABOVE SLANTED EQUAL
  dtMap[0x2A95] = 0x2A96;  // SLANTED EQUAL TO OR LESS-THAN
  dtMap[0x2A96] = 0x2A95;  // SLANTED EQUAL TO OR GREATER-THAN
  dtMap[0x2A97] = 0x2A98;  // SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE
  dtMap[0x2A98] = 0x2A97;  // SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE
  dtMap[0x2A99] = 0x2A9A;  // DOUBLE-LINE EQUAL TO OR LESS-THAN
  dtMap[0x2A9A] = 0x2A99;  // DOUBLE-LINE EQUAL TO OR GREATER-THAN
  dtMap[0x2A9B] = 0x2A9C;  // DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN
  dtMap[0x2A9C] = 0x2A9B;  // DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN
  dtMap[0x2A9D] = 0x2A9E;  // [BEST FIT] SIMILAR OR LESS-THAN
  dtMap[0x2A9E] = 0x2A9D;  // [BEST FIT] SIMILAR OR GREATER-THAN
  dtMap[0x2A9F] =
      0x2AA0;  // [BEST FIT] SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN
  dtMap[0x2AA0] =
      0x2A9F;  // [BEST FIT] SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN
  dtMap[0x2AA1] = 0x2AA2;  // DOUBLE NESTED LESS-THAN
  dtMap[0x2AA2] = 0x2AA1;  // DOUBLE NESTED GREATER-THAN
  dtMap[0x2AA6] = 0x2AA7;  // LESS-THAN CLOSED BY CURVE
  dtMap[0x2AA7] = 0x2AA6;  // GREATER-THAN CLOSED BY CURVE
  dtMap[0x2AA8] = 0x2AA9;  // LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL
  dtMap[0x2AA9] = 0x2AA8;  // GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL
  dtMap[0x2AAA] = 0x2AAB;  // SMALLER THAN
  dtMap[0x2AAB] = 0x2AAA;  // LARGER THAN
  dtMap[0x2AAC] = 0x2AAD;  // SMALLER THAN OR EQUAL TO
  dtMap[0x2AAD] = 0x2AAC;  // LARGER THAN OR EQUAL TO
  dtMap[0x2AAF] = 0x2AB0;  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN
  dtMap[0x2AB0] = 0x2AAF;  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN
  dtMap[0x2AB1] = 0x2AB2;  // [BEST FIT] PRECEDES ABOVE SINGLE-LINE NOT EQUAL TO
  dtMap[0x2AB2] = 0x2AB1;  // [BEST FIT] SUCCEEDS ABOVE SINGLE-LINE NOT EQUAL TO
  dtMap[0x2AB3] = 0x2AB4;  // PRECEDES ABOVE EQUALS SIGN
  dtMap[0x2AB4] = 0x2AB3;  // SUCCEEDS ABOVE EQUALS SIGN
  dtMap[0x2AB5] = 0x2AB6;  // [BEST FIT] PRECEDES ABOVE NOT EQUAL TO
  dtMap[0x2AB6] = 0x2AB5;  // [BEST FIT] SUCCEEDS ABOVE NOT EQUAL TO
  dtMap[0x2AB7] = 0x2AB8;  // [BEST FIT] PRECEDES ABOVE ALMOST EQUAL TO
  dtMap[0x2AB8] = 0x2AB7;  // [BEST FIT] SUCCEEDS ABOVE ALMOST EQUAL TO
  dtMap[0x2AB9] = 0x2ABA;  // [BEST FIT] PRECEDES ABOVE NOT ALMOST EQUAL TO
  dtMap[0x2ABA] = 0x2AB9;  // [BEST FIT] SUCCEEDS ABOVE NOT ALMOST EQUAL TO
  dtMap[0x2ABB] = 0x2ABC;  // DOUBLE PRECEDES
  dtMap[0x2ABC] = 0x2ABB;  // DOUBLE SUCCEEDS
  dtMap[0x2ABD] = 0x2ABE;  // SUBSET WITH DOT
  dtMap[0x2ABE] = 0x2ABD;  // SUPERSET WITH DOT
  dtMap[0x2ABF] = 0x2AC0;  // SUBSET WITH PLUS SIGN BELOW
  dtMap[0x2AC0] = 0x2ABF;  // SUPERSET WITH PLUS SIGN BELOW
  dtMap[0x2AC1] = 0x2AC2;  // SUBSET WITH MULTIPLICATION SIGN BELOW
  dtMap[0x2AC2] = 0x2AC1;  // SUPERSET WITH MULTIPLICATION SIGN BELOW
  dtMap[0x2AC3] = 0x2AC4;  // SUBSET OF OR EQUAL TO WITH DOT ABOVE
  dtMap[0x2AC4] = 0x2AC3;  // SUPERSET OF OR EQUAL TO WITH DOT ABOVE
  dtMap[0x2AC5] = 0x2AC6;  // SUBSET OF ABOVE EQUALS SIGN
  dtMap[0x2AC6] = 0x2AC5;  // SUPERSET OF ABOVE EQUALS SIGN
  dtMap[0x2AC7] = 0x2AC8;  // [BEST FIT] SUBSET OF ABOVE TILDE OPERATOR
  dtMap[0x2AC8] = 0x2AC7;  // [BEST FIT] SUPERSET OF ABOVE TILDE OPERATOR
  dtMap[0x2AC9] = 0x2ACA;  // [BEST FIT] SUBSET OF ABOVE ALMOST EQUAL TO
  dtMap[0x2ACA] = 0x2AC9;  // [BEST FIT] SUPERSET OF ABOVE ALMOST EQUAL TO
  dtMap[0x2ACB] = 0x2ACC;  // [BEST FIT] SUBSET OF ABOVE NOT EQUAL TO
  dtMap[0x2ACC] = 0x2ACB;  // [BEST FIT] SUPERSET OF ABOVE NOT EQUAL TO
  dtMap[0x2ACD] = 0x2ACE;  // SQUARE LEFT OPEN BOX OPERATOR
  dtMap[0x2ACE] = 0x2ACD;  // SQUARE RIGHT OPEN BOX OPERATOR
  dtMap[0x2ACF] = 0x2AD0;  // CLOSED SUBSET
  dtMap[0x2AD0] = 0x2ACF;  // CLOSED SUPERSET
  dtMap[0x2AD1] = 0x2AD2;  // CLOSED SUBSET OR EQUAL TO
  dtMap[0x2AD2] = 0x2AD1;  // CLOSED SUPERSET OR EQUAL TO
  dtMap[0x2AD3] = 0x2AD4;  // SUBSET ABOVE SUPERSET
  dtMap[0x2AD4] = 0x2AD3;  // SUPERSET ABOVE SUBSET
  dtMap[0x2AD5] = 0x2AD6;  // SUBSET ABOVE SUBSET
  dtMap[0x2AD6] = 0x2AD5;  // SUPERSET ABOVE SUPERSET
  dtMap[0x2ADE] = 0x22A6;  // SHORT LEFT TACK
  dtMap[0x2AE3] = 0x22A9;  // DOUBLE VERTICAL BAR LEFT TURNSTILE
  dtMap[0x2AE4] = 0x22A8;  // VERTICAL BAR DOUBLE LEFT TURNSTILE
  dtMap[0x2AE5] = 0x22AB;  // DOUBLE VERTICAL BAR DOUBLE LEFT TURNSTILE
  dtMap[0x2AEC] = 0x2AED;  // DOUBLE STROKE NOT SIGN
  dtMap[0x2AED] = 0x2AEC;  // REVERSED DOUBLE STROKE NOT SIGN
  dtMap[0x2AEE] = 0x2224;  // DOES NOT DIVIDE WITH REVERSED NEGATION SLASH
  dtMap[0x2AF7] = 0x2AF8;  // TRIPLE NESTED LESS-THAN
  dtMap[0x2AF8] = 0x2AF7;  // TRIPLE NESTED GREATER-THAN
  dtMap[0x2AF9] = 0x2AFA;  // DOUBLE-LINE SLANTED LESS-THAN OR EQUAL TO
  dtMap[0x2AFA] = 0x2AF9;  // DOUBLE-LINE SLANTED GREATER-THAN OR EQUAL TO
  dtMap[0x2BFE] = 0x221F;  // REVERSED RIGHT ANGLE
  dtMap[0x2E02] = 0x2E03;  // LEFT SUBSTITUTION BRACKET
  dtMap[0x2E03] = 0x2E02;  // RIGHT SUBSTITUTION BRACKET
  dtMap[0x2E04] = 0x2E05;  // LEFT DOTTED SUBSTITUTION BRACKET
  dtMap[0x2E05] = 0x2E04;  // RIGHT DOTTED SUBSTITUTION BRACKET
  dtMap[0x2E09] = 0x2E0A;  // LEFT TRANSPOSITION BRACKET
  dtMap[0x2E0A] = 0x2E09;  // RIGHT TRANSPOSITION BRACKET
  dtMap[0x2E0C] = 0x2E0D;  // LEFT RAISED OMISSION BRACKET
  dtMap[0x2E0D] = 0x2E0C;  // RIGHT RAISED OMISSION BRACKET
  dtMap[0x2E1C] = 0x2E1D;  // LEFT LOW PARAPHRASE BRACKET
  dtMap[0x2E1D] = 0x2E1C;  // RIGHT LOW PARAPHRASE BRACKET
  dtMap[0x2E20] = 0x2E21;  // LEFT VERTICAL BAR WITH QUILL
  dtMap[0x2E21] = 0x2E20;  // RIGHT VERTICAL BAR WITH QUILL
  dtMap[0x2E22] = 0x2E23;  // TOP LEFT HALF BRACKET
  dtMap[0x2E23] = 0x2E22;  // TOP RIGHT HALF BRACKET
  dtMap[0x2E24] = 0x2E25;  // BOTTOM LEFT HALF BRACKET
  dtMap[0x2E25] = 0x2E24;  // BOTTOM RIGHT HALF BRACKET
  dtMap[0x2E26] = 0x2E27;  // LEFT SIDEWAYS U BRACKET
  dtMap[0x2E27] = 0x2E26;  // RIGHT SIDEWAYS U BRACKET
  dtMap[0x2E28] = 0x2E29;  // LEFT DOUBLE PARENTHESIS
  dtMap[0x2E29] = 0x2E28;  // RIGHT DOUBLE PARENTHESIS
  dtMap[0x3008] = 0x3009;  // LEFT ANGLE BRACKET
  dtMap[0x3009] = 0x3008;  // RIGHT ANGLE BRACKET
  dtMap[0x300A] = 0x300B;  // LEFT DOUBLE ANGLE BRACKET
  dtMap[0x300B] = 0x300A;  // RIGHT DOUBLE ANGLE BRACKET
  dtMap[0x300C] = 0x300D;  // [BEST FIT] LEFT CORNER BRACKET
  dtMap[0x300D] = 0x300C;  // [BEST FIT] RIGHT CORNER BRACKET
  dtMap[0x300E] = 0x300F;  // [BEST FIT] LEFT WHITE CORNER BRACKET
  dtMap[0x300F] = 0x300E;  // [BEST FIT] RIGHT WHITE CORNER BRACKET
  dtMap[0x3010] = 0x3011;  // LEFT BLACK LENTICULAR BRACKET
  dtMap[0x3011] = 0x3010;  // RIGHT BLACK LENTICULAR BRACKET
  dtMap[0x3014] = 0x3015;  // LEFT TORTOISE SHELL BRACKET
  dtMap[0x3015] = 0x3014;  // RIGHT TORTOISE SHELL BRACKET
  dtMap[0x3016] = 0x3017;  // LEFT WHITE LENTICULAR BRACKET
  dtMap[0x3017] = 0x3016;  // RIGHT WHITE LENTICULAR BRACKET
  dtMap[0x3018] = 0x3019;  // LEFT WHITE TORTOISE SHELL BRACKET
  dtMap[0x3019] = 0x3018;  // RIGHT WHITE TORTOISE SHELL BRACKET
  dtMap[0x301A] = 0x301B;  // LEFT WHITE SQUARE BRACKET
  dtMap[0x301B] = 0x301A;  // RIGHT WHITE SQUARE BRACKET
  dtMap[0xFE59] = 0xFE5A;  // SMALL LEFT PARENTHESIS
  dtMap[0xFE5A] = 0xFE59;  // SMALL RIGHT PARENTHESIS
  dtMap[0xFE5B] = 0xFE5C;  // SMALL LEFT CURLY BRACKET
  dtMap[0xFE5C] = 0xFE5B;  // SMALL RIGHT CURLY BRACKET
  dtMap[0xFE5D] = 0xFE5E;  // SMALL LEFT TORTOISE SHELL BRACKET
  dtMap[0xFE5E] = 0xFE5D;  // SMALL RIGHT TORTOISE SHELL BRACKET
  dtMap[0xFE64] = 0xFE65;  // SMALL LESS-THAN SIGN
  dtMap[0xFE65] = 0xFE64;  // SMALL GREATER-THAN SIGN
  dtMap[0xFF08] = 0xFF09;  // FULLWIDTH LEFT PARENTHESIS
  dtMap[0xFF09] = 0xFF08;  // FULLWIDTH RIGHT PARENTHESIS
  dtMap[0xFF1C] = 0xFF1E;  // FULLWIDTH LESS-THAN SIGN
  dtMap[0xFF1E] = 0xFF1C;  // FULLWIDTH GREATER-THAN SIGN
  dtMap[0xFF3B] = 0xFF3D;  // FULLWIDTH LEFT SQUARE BRACKET
  dtMap[0xFF3D] = 0xFF3B;  // FULLWIDTH RIGHT SQUARE BRACKET
  dtMap[0xFF5B] = 0xFF5D;  // FULLWIDTH LEFT CURLY BRACKET
  dtMap[0xFF5D] = 0xFF5B;  // FULLWIDTH RIGHT CURLY BRACKET
  dtMap[0xFF5F] = 0xFF60;  // FULLWIDTH LEFT WHITE PARENTHESIS
  dtMap[0xFF60] = 0xFF5F;  // FULLWIDTH RIGHT WHITE PARENTHESIS
  dtMap[0xFF62] = 0xFF63;  // [BEST FIT] HALFWIDTH LEFT CORNER BRACKET
  dtMap[0xFF63] = 0xFF62;  // [BEST FIT] HALFWIDTH RIGHT CORNER BRACKET
  return dtMap;
}

int BidiMirror::getMirror(char32_t c) { return mData[c]; }

BidiMirror::DtMap BidiMirror::mData = BidiMirror::Create_mData();
