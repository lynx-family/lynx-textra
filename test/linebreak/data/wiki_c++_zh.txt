“C++程序设计语言”重定向至此。关于相关译名书籍，请见“C++编程语言 (书)”。

C++是一种被广泛使用的计算机程序设计语言。它是一种通用程序设计语言，支持多重编程范式，例如过程化程序设计、面向对象程序设计、泛型程序设计和函数式程序设计等。

比雅尼·斯特劳斯特鲁普博士在贝尔实验室工作期间在20世纪80年代发明并实现了C++。起初，这种语言被称作“C with Classes”（“包含‘类’的C语言”），作为C语言的增强版出现。随后，C++不断增加新特性。虚函数、运算符重载、多继承、标准模板库、异常处理、运行时类型信息、命名空间等概念逐渐纳入标准草案。1998年，国际标准组织颁布了C++程序设计语言的第一个国际标准ISO/IEC 14882:1998，目前最新标准为ISO/IEC 14882:2020。ISO/IEC 14882通称ISO C++。ISO C++包含了主要包含了核心语言和标准库的规则。尽管从核心语言到标准库都有显著不同，ISO C++直接正式（normative）引用了ISO/IEC 9899（通称ISO C），且ISO C++标准库的一部分和ISO C的标准库的API完全相同，另有很小一部分和C标准库略有差异（例如，strcat等函数提供对const类型的重载）。这使得C和C++的标准库实现常常被一并提供，在核心语言规则很大一部分兼容的情况下，进一步确保用户通常较容易把符合ISO C的源程序不经修改或经极少修改直接作为C++源程序使用，也是C++语言继C语言之后流行的一个重要原因。

作为广泛被使用的工业语言，C++存在多个流行的成熟实现：GCC、基于LLVM的Clang以及Visual C++等。这些实现同时也是成熟的C语言实现，但对C语言的支持程度不一（例如，VC++对ANSI C89之后的标准支持较不完善）。大多数流行的实现包含了编译器和C++部分标准库的实现。编译器直接提供核心语言规则的实现，而库提供ISO C++标准库的实现。这些实现中，库可能同时包含和ISO C标准库的共享实现（如VC++的msvcrt）；而另一些实现的ISO C标准库则是单独于编译器项目之外提供的，如glibc和musl。C++标准库的实现也可能支持多种编译器，如GCC的libstdc++库支持GCC的g++和LLVM Clang的clang++。这些不同的丰富组合使市面上的C++环境具有许多细节上的实现差异，因而遵循ISO C++这样的权威标准对维持可移植性显得更加重要。现今讨论的C++语言，除非另行指明，通常均指ISO C++规则定义的C++语言（虽然因为实现的差异，可能不一定是最新的正式版本）。

值得注意，和流行的误解不同，ISO C和ISO C++都从未明确要求源程序被编译（compile），而仅要求翻译（translate），因此C和C++并不是所谓的编译型语言。技术上，实现C和C++程序的单位是翻译单元（translation unit）。作为对比，Java语言规范中就明确要求Java程序被编译实现，明确存在编译单元（compilation unit）。实际上C和C++也存在REPL形式的解释器实现，如CINT和Cling。但因为传统上C和C++多以编译器实现，习惯上仍有一些混用，甚至至今仍出现在ISO C++某节标准库条款的标题 （页面存档备份，存于互联网档案馆）上。

传统上，C++语言被视为和C语言实现性能相近的语言，强调运行时的高效。根据《C++编程思想》（Thinking in C++）一书，C++与C的代码执行效率往往相差在±5%之间[2]。

C++语言发展大概可以分为三个阶段：第一阶段从80年代到1995年。这一阶段C++语言基本上是传统类型上的面向对象语言，并且凭借着接近C语言的效率，在工业界使用的开发语言中占据了相当大份额；第二阶段从1995年到2000年，这一阶段由于标准模板库和后来的Boost等程序库的出现，泛型程序设计在C++中占据了越来越多的比重。当然，同时由于Java、C#等语言的出现和硬件价格的大规模下降，C++受到了一定的冲击；第三阶段从2000年至今，由于以Loki、MPL(Boost)等程序库为代表的产生式编程和模板元编程的出现，C++出现了发展历史上又一个新的高峰，这些新技术的出现以及和原有技术的融合，使C++已经成为当今主流程序设计语言中最复杂的一员。

比雅尼·斯特劳斯特鲁普工作起于1979年的C with Classes。这个构思起源于斯特劳斯特鲁普做博士论文时的一些程序撰写经验。他发现Simula具备很利于大型软件开发的特点，但Simula的执行速度太慢，无法对现实需求发挥功效；BCPL虽快得多，但它过于低端的特性，使其不适于大型软件的开发。当斯特劳斯特鲁普开始在贝尔实验室工作时，他有分析UNIX核心关于分布式计算的问题。回想起他的博士论文经验，斯特劳斯特鲁普开始为C语言增强一些类似Simula的特点[3]。之所以选择C，是因为它适于各种用途、快速和可移植性。除了C语言和Simula之外，同时也从其它语言中获取灵感，如ALGOL 68、Ada、CLU以及ML。

刚开始时，类别、派生类、存储类型检查、内联和缺省参数特性，都是透过Cfront引入C语言之中[4]。

1983年，C with Classes改命名为C++（++是C语言中的增值操作符）。加入了新的特性，其中包括虚函数、函数名和运算符重载、参考、常量、用户可控制的自由空间存储区控制、改良的类型检查，并恢复了BCPL风格的双斜线（//）单行注释（之后C99也支持了这种注释）。

1985年，发布第一版《C++程序设计语言》，提供一个重点的语言参考，至此还不是官方标准[5]。1985年10月出现了第一个商业化发布。

1989年，发布了Release 2.0。引入了多重继承、抽象类别、静态成员函数、常量成员函数，以及成员保护。1990年，出版了The Annotated C++ Reference Manual。这本书后来成为标准化的基础。稍后还引入了模板、异常处理、命名空间、新的强制类型转换，以及布尔类型。

随着C++语言的演变，也逐渐演化出相应的标准程序库。最先加进C++标准函式库的是流I/O程序库，其用以取代传统的C函数，如printf和scanf。随后所引入的程序库中最重要的便是标准模板库，简称STL。

多年后，一个联合的ANSI-ISO委员会于1998年对C++标准化（ISO/IEC 14882：1998）。在官方发布1998标准的若干年后，委员会处理缺陷报告，并于2003年发布一个C++标准的修正版本。2005年，一份名为Library Technical Report 1（简称TR1）的技术报告发布。虽然还不是官方标准的一部分，不过它所提供的几个扩展可望成为下一版C++标准的一部分。几乎所有目前仍在维护的C++编译器皆已支持TR1。

目前最新的C++标准是2020年12月发布的ISO/IEC 14882:2020[6]，又称C++20。

虽然C++本身无专利，但标准文件本身并不是免费的，尽管标准文档不是免费的，但是很容易从网络中获取，最简单的就是C++标准文档之前的最后一次草稿版本，它与标准的差别几乎只在于排版上。

C++名字的由来
C++这个名字是Rick Mascitti于1983年中所建议的，并于1983年12月首次使用。更早以前，尚在研究阶段的发展中语言曾被称为“new C”，之后是“C with Classes”。在计算机科学中，C++仍被称为C语言的上层结构。它最后得名于C语言中的“++”运算符（其对变量的值进行递增）。而且在共同的命名约定中，使用“+”以表示增强的程序。斯特劳斯特鲁普说：“这个名字象征着源自于C语言变化的自然演进”。C+是一个和C/C++无关的早期编程语言。

Rick Mascitti在1992年被非正式地问起名字的由来，他表示这是在半开玩笑中说出的。他从没想过C++会成为这门语言的正式名字。

有一个关于C++名字的笑话是，当你使用后缀++时，附加只发生在运算之后（因此，它应该是++C，而不是C++，这个笑话是说时下某些程序员还在以使用C的方式使用C++，这通常被一些权威著作认为是不正确的）。
